#!/bin/bash

# List of Pokémon
POKEMONS=("Bulbasaur" "Ivysaur" "Venusaur" "Charmander" "Charmeleon")

# Base API URL
API_BASE="https://pokeapi.co/api/v2/pokemon"
ERROR_LOG="errors.txt"

# Clear old error log
> "$ERROR_LOG"

# Track PIDs of background jobs
declare -a JOB_PIDS=()

# Function to fetch data
fetch_pokemon() {
    local pokemon=$1
    local lower_name
    lower_name=$(echo "$pokemon" | awk '{print tolower($0)}')
    local output_file="${lower_name}.json"

    echo "🔍 Fetching $pokemon (PID $$)..."

    http_status=$(curl -s -w "%{http_code}" -o "$output_file" "${API_BASE}/${lower_name}")

    if [ "$http_status" -eq 200 ]; then
        echo "✅ $pokemon saved to $output_file"
    else
        echo "❌ Failed to fetch $pokemon (HTTP $http_status)"
        echo "$pokemon - HTTP $http_status" >> "$ERROR_LOG"
        rm -f "$output_file"
    fi
}

# Trap to handle script termination and clean up background jobs
cleanup() {
    echo "🧹 Cleaning up background jobs..."
    for pid in "${JOB_PIDS[@]}"; do
        if kill -0 "$pid" 2>/dev/null; then
            echo "🛑 Killing process $pid"
            kill "$pid"
        fi
    done
    wait
    echo "✅ Cleanup complete."
    exit 1
}

# Set trap for INT (Ctrl+C) or TERM signals
trap cleanup INT TERM

# Launch all fetches in background
for pokemon in "${POKEMONS[@]}"; do
    fetch_pokemon "$pokemon" &
    JOB_PIDS+=("$!")  # Store PID of background job
done

# Optionally, show current background jobs
echo "📋 Running jobs:"
jobs

# Wait for all to complete
wait

echo "✅ All fetch operations completed."

